// Generated by gencpp from file husky_cortex/adjedge.msg
// DO NOT EDIT!


#ifndef HUSKY_CORTEX_MESSAGE_ADJEDGE_H
#define HUSKY_CORTEX_MESSAGE_ADJEDGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace husky_cortex
{
template <class ContainerAllocator>
struct adjedge_
{
  typedef adjedge_<ContainerAllocator> Type;

  adjedge_()
    : from(0)
    , to(0)  {
    }
  adjedge_(const ContainerAllocator& _alloc)
    : from(0)
    , to(0)  {
  (void)_alloc;
    }



   typedef int32_t _from_type;
  _from_type from;

   typedef int32_t _to_type;
  _to_type to;


    static const double cost;
 

  typedef boost::shared_ptr< ::husky_cortex::adjedge_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::husky_cortex::adjedge_<ContainerAllocator> const> ConstPtr;

}; // struct adjedge_

typedef ::husky_cortex::adjedge_<std::allocator<void> > adjedge;

typedef boost::shared_ptr< ::husky_cortex::adjedge > adjedgePtr;
typedef boost::shared_ptr< ::husky_cortex::adjedge const> adjedgeConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const double
      adjedge_<ContainerAllocator>::cost =
        
          1.0
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::husky_cortex::adjedge_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::husky_cortex::adjedge_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace husky_cortex

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'husky_cortex': ['/home/husky/husky/husky_ws/src/husky_cortex/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::husky_cortex::adjedge_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::husky_cortex::adjedge_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::husky_cortex::adjedge_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::husky_cortex::adjedge_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::husky_cortex::adjedge_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::husky_cortex::adjedge_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::husky_cortex::adjedge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0067f5a5ee4506e8d411882b981eece6";
  }

  static const char* value(const ::husky_cortex::adjedge_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0067f5a5ee4506e8ULL;
  static const uint64_t static_value2 = 0xd411882b981eece6ULL;
};

template<class ContainerAllocator>
struct DataType< ::husky_cortex::adjedge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "husky_cortex/adjedge";
  }

  static const char* value(const ::husky_cortex::adjedge_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::husky_cortex::adjedge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 from\n\
int32 to\n\
float64 cost = 1.\n\
";
  }

  static const char* value(const ::husky_cortex::adjedge_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::husky_cortex::adjedge_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.from);
      stream.next(m.to);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct adjedge_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::husky_cortex::adjedge_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::husky_cortex::adjedge_<ContainerAllocator>& v)
  {
    s << indent << "from: ";
    Printer<int32_t>::stream(s, indent + "  ", v.from);
    s << indent << "to: ";
    Printer<int32_t>::stream(s, indent + "  ", v.to);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUSKY_CORTEX_MESSAGE_ADJEDGE_H
