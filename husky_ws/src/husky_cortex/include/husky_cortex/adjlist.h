// Generated by gencpp from file husky_cortex/adjlist.msg
// DO NOT EDIT!


#ifndef HUSKY_CORTEX_MESSAGE_ADJLIST_H
#define HUSKY_CORTEX_MESSAGE_ADJLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <husky_cortex/adjedgelist.h>

namespace husky_cortex
{
template <class ContainerAllocator>
struct adjlist_
{
  typedef adjlist_<ContainerAllocator> Type;

  adjlist_()
    : graph()  {
    }
  adjlist_(const ContainerAllocator& _alloc)
    : graph(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::husky_cortex::adjedgelist_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::husky_cortex::adjedgelist_<ContainerAllocator> >::other >  _graph_type;
  _graph_type graph;




  typedef boost::shared_ptr< ::husky_cortex::adjlist_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::husky_cortex::adjlist_<ContainerAllocator> const> ConstPtr;

}; // struct adjlist_

typedef ::husky_cortex::adjlist_<std::allocator<void> > adjlist;

typedef boost::shared_ptr< ::husky_cortex::adjlist > adjlistPtr;
typedef boost::shared_ptr< ::husky_cortex::adjlist const> adjlistConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::husky_cortex::adjlist_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::husky_cortex::adjlist_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace husky_cortex

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'husky_cortex': ['/home/husky/husky/husky_ws/src/husky_cortex/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::husky_cortex::adjlist_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::husky_cortex::adjlist_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::husky_cortex::adjlist_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::husky_cortex::adjlist_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::husky_cortex::adjlist_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::husky_cortex::adjlist_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::husky_cortex::adjlist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1cba8d4dfbf2a477361e57ff0304e53";
  }

  static const char* value(const ::husky_cortex::adjlist_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1cba8d4dfbf2a47ULL;
  static const uint64_t static_value2 = 0x7361e57ff0304e53ULL;
};

template<class ContainerAllocator>
struct DataType< ::husky_cortex::adjlist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "husky_cortex/adjlist";
  }

  static const char* value(const ::husky_cortex::adjlist_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::husky_cortex::adjlist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "adjedgelist[] graph\n\
\n\
================================================================================\n\
MSG: husky_cortex/adjedgelist\n\
adjedge[] edgelist\n\
\n\
================================================================================\n\
MSG: husky_cortex/adjedge\n\
int32 from\n\
int32 to\n\
float64 cost = 1.\n\
";
  }

  static const char* value(const ::husky_cortex::adjlist_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::husky_cortex::adjlist_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.graph);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct adjlist_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::husky_cortex::adjlist_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::husky_cortex::adjlist_<ContainerAllocator>& v)
  {
    s << indent << "graph[]" << std::endl;
    for (size_t i = 0; i < v.graph.size(); ++i)
    {
      s << indent << "  graph[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::husky_cortex::adjedgelist_<ContainerAllocator> >::stream(s, indent + "    ", v.graph[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUSKY_CORTEX_MESSAGE_ADJLIST_H
