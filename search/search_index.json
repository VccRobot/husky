{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Husky in The Wild Ongoing development of exploration robot navigation in unknown outdoor environment. Installation Easy install: Install all but not google-cartographer(recommended) sh install.sh Install all packages sh install_all.sh The code is build on top of ROS - Indigo and simulate Husky robot using Gazebo . The code has been tested only on Ubuntu 14.04. Please follow the following steps in order to install the package along with its dependences: Install ROS-Indigo full desktop ( guide ). Install Husky official package ( guide ) Install the Octomap package that can be optionally used for mapping ( guide ) Install the Teleop Twist Keyboard package to control Husky using keyboard: sudo apt-get install ros-indigo-teleop-twist-keyboard Install Husky other dependences. Assuming Husky package is cloned under $HUSKY_DIR$ : cd $HUSKY_DIR$ rosdep install --from-path src --ignore-src --rosdistro=indigo -y Install our Husky package: cd $HUSKY_DIR$ catkin_make The Gazebo version shipped with ROS-Indigo has known issue of being unable to download Gazebo models from Gazebo online repository. In order to avoid errors that might come up due to this issue, download and extract Gazebo models ( here [231MB] ) and place them under ~/.gazebo/models/ Running Run source devel/setup.bash in project root in order to setup the environment variables. The code builds each useful functionality in a separate package for better modularity. In order to run the simulated Husky, you can run every components at once or step by step. Run all: Script for starting everything at once, so no need for multiple terminals. - Run in playpen: python husky_ws/scripts/run_playpen.py - Run in rough terrain: python husky_ws/scripts/terrain.py You can specify localization and mapping algorithm by appending their name behind the command, for example: - Use LOAM as SLAM algorithm: python husky_ws/scripts/run_playpen.py loam The default localization algorithm is extended kalman filter (EKF). And the default mapping algorithm is octomap. Notice that gazebo server may be very slow to start, so if you need to restart everything frequently, you can type roslaunch husky_gazebo ${launch file} to start the server, next close the gazebo client, then run the command above Run one by one: Basic Husky: roslaunch husky_gazebo husky_playpen.launch Other launch files can be used for different other outdoor environments e.g., husky_wild.launch , husky_terrain.launch . Mapping: In a different terminal, run roslaunch octomap_server octomap_mapping.launch This is for mapping using Octomap . Alternatively, SLAM LOAM can be used as follows roslaunch loam_velodyne loam_velodyne.launch Visualization: With mapping using SLAM LOAM, it launches its own visualization ( rviz ). For mapping Octomap or to just visualize the pointcloud from Husky, run in a different terminal roslaunch husky_viz view_robot.launch On the left panel, user can choose to either visualize the instant pointcloud or the constructed map by changing the Topic of Sensing->PointCloud2 . Controlling: To control Husky using the keyboard, run in a different terminal roslaunch husky_control teleop_keyboard.launch Parameter Hacking TODO","title":"Home"},{"location":"#husky-in-the-wild","text":"Ongoing development of exploration robot navigation in unknown outdoor environment.","title":"Husky in The Wild"},{"location":"#installation","text":"Easy install: Install all but not google-cartographer(recommended) sh install.sh Install all packages sh install_all.sh The code is build on top of ROS - Indigo and simulate Husky robot using Gazebo . The code has been tested only on Ubuntu 14.04. Please follow the following steps in order to install the package along with its dependences: Install ROS-Indigo full desktop ( guide ). Install Husky official package ( guide ) Install the Octomap package that can be optionally used for mapping ( guide ) Install the Teleop Twist Keyboard package to control Husky using keyboard: sudo apt-get install ros-indigo-teleop-twist-keyboard Install Husky other dependences. Assuming Husky package is cloned under $HUSKY_DIR$ : cd $HUSKY_DIR$ rosdep install --from-path src --ignore-src --rosdistro=indigo -y Install our Husky package: cd $HUSKY_DIR$ catkin_make The Gazebo version shipped with ROS-Indigo has known issue of being unable to download Gazebo models from Gazebo online repository. In order to avoid errors that might come up due to this issue, download and extract Gazebo models ( here [231MB] ) and place them under ~/.gazebo/models/","title":"Installation"},{"location":"#running","text":"Run source devel/setup.bash in project root in order to setup the environment variables. The code builds each useful functionality in a separate package for better modularity. In order to run the simulated Husky, you can run every components at once or step by step.","title":"Running"},{"location":"#run-all","text":"Script for starting everything at once, so no need for multiple terminals. - Run in playpen: python husky_ws/scripts/run_playpen.py - Run in rough terrain: python husky_ws/scripts/terrain.py You can specify localization and mapping algorithm by appending their name behind the command, for example: - Use LOAM as SLAM algorithm: python husky_ws/scripts/run_playpen.py loam The default localization algorithm is extended kalman filter (EKF). And the default mapping algorithm is octomap. Notice that gazebo server may be very slow to start, so if you need to restart everything frequently, you can type roslaunch husky_gazebo ${launch file} to start the server, next close the gazebo client, then run the command above","title":"Run all:"},{"location":"#run-one-by-one","text":"Basic Husky: roslaunch husky_gazebo husky_playpen.launch Other launch files can be used for different other outdoor environments e.g., husky_wild.launch , husky_terrain.launch . Mapping: In a different terminal, run roslaunch octomap_server octomap_mapping.launch This is for mapping using Octomap . Alternatively, SLAM LOAM can be used as follows roslaunch loam_velodyne loam_velodyne.launch Visualization: With mapping using SLAM LOAM, it launches its own visualization ( rviz ). For mapping Octomap or to just visualize the pointcloud from Husky, run in a different terminal roslaunch husky_viz view_robot.launch On the left panel, user can choose to either visualize the instant pointcloud or the constructed map by changing the Topic of Sensing->PointCloud2 . Controlling: To control Husky using the keyboard, run in a different terminal roslaunch husky_control teleop_keyboard.launch","title":"Run one by one:"},{"location":"#parameter-hacking","text":"TODO","title":"Parameter Hacking"},{"location":"brain/","text":"Husky Cortex Module This module provides high level perception and path planning for the robot. husky_brain ROS Package Documentation Nodes and Topics cortexMap subscribes location , publishes meshmap and reebgraph cortexPlanner subscribes location , meshmap and reebgraph , publishes next_waypoints Nodes cortexMap builds the simplified 3d map incrementally while moving. It subscribes location , publishes meshmap and reebgraph cortexPlanner computes coverage path and plans the next move. It subscribes location , meshmap and reebgraph , publishes next_waypoints cortexWorld provides APIs for the cortex module. It subscribes next_waypoints , publishes location cortexViewer display meshes, topological graphs and other informations. It subscribes to all the topics listed below. Topics meshmap reebgraph next_waypoint location Message Types meshmap which contains: V a V by 1 vector. E a E by 1 vector. reebi a V by 1 vector, which encodes which reebgraph node a vertex belongs. vtype an E by 1 vector, which encodes the status of the vertices. 0 means the vertex is undiscovered. 1 means the vertex is discovered. 2 means the vertex is a boundary point. 3 means the vertex is a criticle point. reebgraph 'graph' an adjacency list which represents the graph. 'vtype' a V by 1 vector, which encodes type of the vertices. 0 means the vertex is unknown, which means we know there is a vertex undiscovered, but we haven't met it yet. 1 means the vertex is known. 'etype' an E by 1 vector, which encodes type of the edges. 0 means the edge is unknown, which means we know there is a vertex undiscovered, but we haven't met it yet. 1 means the edge is known. 2 means the edge is partially known, which means we know there is an edge, but the other end of it is unknown. adjlist a V by 1 vector of adjedgelist adjedgelist a variable-length vector of adjedge adjedge 'from' a vertex index 'to' a vertex index 'cost' a float64","title":"Intelligence"},{"location":"brain/#husky-cortex-module","text":"This module provides high level perception and path planning for the robot.","title":"Husky Cortex Module"},{"location":"brain/#husky_brain-ros-package-documentation","text":"","title":"husky_brain ROS Package Documentation"},{"location":"brain/#nodes-and-topics","text":"cortexMap subscribes location , publishes meshmap and reebgraph cortexPlanner subscribes location , meshmap and reebgraph , publishes next_waypoints","title":"Nodes and Topics"},{"location":"brain/#nodes","text":"cortexMap builds the simplified 3d map incrementally while moving. It subscribes location , publishes meshmap and reebgraph cortexPlanner computes coverage path and plans the next move. It subscribes location , meshmap and reebgraph , publishes next_waypoints cortexWorld provides APIs for the cortex module. It subscribes next_waypoints , publishes location cortexViewer display meshes, topological graphs and other informations. It subscribes to all the topics listed below.","title":"Nodes"},{"location":"brain/#topics","text":"meshmap reebgraph next_waypoint location","title":"Topics"},{"location":"brain/#message-types","text":"meshmap which contains: V a V by 1 vector. E a E by 1 vector. reebi a V by 1 vector, which encodes which reebgraph node a vertex belongs. vtype an E by 1 vector, which encodes the status of the vertices. 0 means the vertex is undiscovered. 1 means the vertex is discovered. 2 means the vertex is a boundary point. 3 means the vertex is a criticle point. reebgraph 'graph' an adjacency list which represents the graph. 'vtype' a V by 1 vector, which encodes type of the vertices. 0 means the vertex is unknown, which means we know there is a vertex undiscovered, but we haven't met it yet. 1 means the vertex is known. 'etype' an E by 1 vector, which encodes type of the edges. 0 means the edge is unknown, which means we know there is a vertex undiscovered, but we haven't met it yet. 1 means the edge is known. 2 means the edge is partially known, which means we know there is an edge, but the other end of it is unknown. adjlist a V by 1 vector of adjedgelist adjedgelist a variable-length vector of adjedge adjedge 'from' a vertex index 'to' a vertex index 'cost' a float64","title":"Message Types"},{"location":"control/","text":"TO DO","title":"Control"},{"location":"control/#to-do","text":"","title":"TO DO"},{"location":"navigation/","text":"TO DO","title":"Navigation"},{"location":"navigation/#to-do","text":"","title":"TO DO"},{"location":"pcprocessing/","text":"TO DO","title":"PointCloudProcessing"},{"location":"pcprocessing/#to-do","text":"","title":"TO DO"}]}